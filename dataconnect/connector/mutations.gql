# # Example mutations for a simple movie app

# # Create a movie based on user input
# mutation CreateMovie($title: String!, $genre: String!, $imageUrl: String!)
# @auth(level: USER_EMAIL_VERIFIED) {
#   movie_insert(data: { title: $title, genre: $genre, imageUrl: $imageUrl })
# }

# # Upsert (update or insert) a user's username based on their auth.uid
# mutation UpsertUser($username: String!) @auth(level: USER) {
#   # The "auth.uid" server value ensures that users can only register their own user.
#   user_upsert(data: { id_expr: "auth.uid", username: $username })
# }

# # Add a review for a movie
# mutation AddReview($movieId: UUID!, $rating: Int!, $reviewText: String!)
# @auth(level: USER) {
#   review_upsert(
#     data: {
#       userId_expr: "auth.uid"
#       movieId: $movieId
#       rating: $rating
#       reviewText: $reviewText
#       # reviewDate defaults to today in the schema. No need to set it manually.
#     }
#   )
# }

# # Logged in user can delete their review for a movie
# mutation DeleteReview($movieId: UUID!) @auth(level: USER) {
#   # The "auth.uid" server value ensures that users can only delete their own reviews.
#   review_delete(key: { userId_expr: "auth.uid", movieId: $movieId })
# }

# Mutations for World Connect app (Ome.tv clone)

# Create or update user profile
mutation UpsertUserProfile($username: String!, $avatarUrl: String, $gender: String, $interests: String) @auth(level: USER) {
  user_upsert(
    data: { 
      id_expr: "auth.uid", 
      username: $username, 
      avatarUrl: $avatarUrl,
      gender: $gender,
      interests: $interests,
      lastActive_expr: "request.time"
    }
  )
}

# Set user online status
mutation UpdateUserOnlineStatus($isOnline: Boolean!) @auth(level: USER) {
  user_update(
    key: { id_expr: "auth.uid" },
    data: { 
      isOnline: $isOnline,
      lastActive_expr: "request.time"
    }
  )
}

# Create a new room
mutation CreateRoom($participant2Id: String!) @auth(level: USER) {
  room_insert(
    data: {
      participant1Id_expr: "auth.uid",
      participant2Id: $participant2Id,
      isActive: true
    }
  )
}

# End a room session
mutation EndRoom($roomId: UUID!) @auth(level: USER) {
  room_update(
    key: { id: $roomId },
    data: { isActive: false }
  )
}

# Send a chat message
mutation SendChatMessage($roomId: UUID!, $content: String!) @auth(level: USER) {
  chatMessage_insert(
    data: {
      roomId: $roomId,
      senderId_expr: "auth.uid",
      content: $content
    }
  )
}

# Report a user
mutation ReportUser($reportedUserId: String!, $reason: String!) @auth(level: USER) {
  report_insert(
    data: {
      reporterId_expr: "auth.uid",
      reportedUserId: $reportedUserId,
      reason: $reason,
      status: "pending"
    }
  )
}
